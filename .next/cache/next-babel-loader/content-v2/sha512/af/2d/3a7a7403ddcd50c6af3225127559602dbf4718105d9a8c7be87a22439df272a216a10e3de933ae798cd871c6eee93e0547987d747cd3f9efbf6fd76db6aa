{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\nconst uri = 'https://ejll3yirxk.execute-api.ap-southeast-2.amazonaws.com/dev/graphql';\nlet client = new ApolloClient({\n  uri,\n  request: operation => {\n    const token = cookies.get('token');\n\n    if (token) {\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : ''\n        }\n      });\n    }\n  }\n});\nlet token = null;\nexport default (() => {\n  return \"Show page working ! \";\n});\nexport const userLogin = (username, password) => dispatch => {\n  const LOGIN_GQL = gql`\n    mutation {\n        login(\n            where: {\n                username: \"${username}\",\n                password: \"${password}\"\n            }\n        ){\n            token\n        }\n    }`;\n  client.mutate({\n    mutation: LOGIN_GQL\n  }).then(({\n    data\n  }) => {\n    if (data.login) {\n      cookies.set('token', data.login.token, {\n        path: '/'\n      });\n      dispatch({\n        type: types.LOGIN,\n        payload: data.login.token\n      });\n    } else {\n      dispatch({\n        type: types.LOGIN_FAIL,\n        payload: 1\n      });\n    }\n  }).catch(error => {\n    dispatch({\n      type: types.LOGIN_FAIL,\n      payload: 1\n    });\n  });\n};\nexport const fetchShops = () => dispatch => {\n  const FETCH_SHOP_GQL = gql`\n    {\n        shop{\n            idshop\n            shop_addr\n            shop_name\n            shop_order\n            shop_phone\n        }\n    }`;\n  client.query({\n    query: FETCH_SHOP_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.FETCH_SHOP,\n      payload: data.shop\n    });\n  });\n};\nexport const fetchMenus = id => dispatch => {\n  const FETCH_MENU_GQL = gql`\n    mutation{\n        getMenu(\n            where:{\n                shop_id: ${id}\n            }\n        ){\n            idmenu\n            menu_name\n        }\n    }`;\n  client.mutate({\n    mutation: FETCH_MENU_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.FETCH_MENU,\n      payload: data.getMenu\n    });\n  });\n};\nexport const deleteMenu = (menuid, shopid) => dispatch => {\n  const DELETE_MENU_GQL = gql`\n    mutation{\n        deleteMenu(\n          where:{\n            menu_id: ${menuid},\n            shop_id: ${shopid}\n          }\n        ){\n            menu_id\n        }\n    }`;\n  client.mutate({\n    mutation: DELETE_MENU_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.DELETE_MENU,\n      payload: data.deleteMenu\n    });\n  });\n};\nexport const deleteShop = shopid => dispatch => {\n  const DELETE_SHOP_GQL = gql`\n    mutation{\n        deleteShop(\n          where: {\n            idshop: ${shopid}\n          }\n        ){\n          idshop\n        }\n    }`;\n  client.mutate({\n    mutation: DELETE_SHOP_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.DELETE_SHOP,\n      payload: data.deleteShop.idshop\n    });\n  });\n};\nexport const addNewMenu = (shopid, menu_name) => dispatch => {\n  const ADD_MENU_GQL = gql`\n    mutation{\n        addMenu(\n        data:{\n          menu_name: \"${menu_name}\",\n          idshop: ${shopid}\n        }\n      ){\n          menu{\n            idmenu\n            menu_name\n          }\n      }\n    }`;\n  client.mutate({\n    mutation: ADD_MENU_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.ADD_MENU,\n      payload: data.addMenu.menu\n    });\n  });\n};\nexport const confirm = open => dispatch => {\n  dispatch({\n    type: types.CONFIRM,\n    payload: open\n  });\n};\nexport const snack = (open, message) => dispatch => {\n  dispatch({\n    type: types.SNACK,\n    payload: {\n      open,\n      message\n    }\n  });\n  setTimeout(function () {\n    dispatch({\n      type: types.SNACK,\n      payload: {\n        open: false,\n        message: ''\n      }\n    });\n  }, 3000);\n};\nexport const addShop = (shopname, shopaddr, shopphone) => dispatch => {\n  const CREATE_SHOP_GQL = gql`\n    mutation{\n        createShop(\n          data :{\n            shop_addr: \"${shopaddr}\",\n            shop_name: \"${shopname}\",\n            shop_order: 5,\n            shop_phone: \"${shopphone}\"\n          }\n        ){\n            idshop\n            shop_addr\n            shop_name\n            shop_order\n            shop_phone\n        }\n    }`;\n  client.mutate({\n    mutation: CREATE_SHOP_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.ADD_SHOP,\n      payload: data.createShop\n    });\n  });\n};\nexport const fetchShopDetail = shopid => dispatch => {\n  const FETCH_SHOP_DETAIL_GQL = gql`\n    {\n        shop(\n            idshop: ${shopid}\n        ),\n        {\n            shop_addr\n            shop_name\n            shop_order\n            shop_phone\n            idshop\n        }\n    }`;\n  client.query({\n    query: FETCH_SHOP_DETAIL_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.FETCH_SHOP_DETAIL,\n      payload: data.shop[0]\n    });\n  });\n};\nexport const updateShopDetail = (shopid, shop_addr, shop_phone, shop_order) => dispatch => {\n  const UPDATE_SHOP_GQL = gql`\n    mutation{\n        updateShop(\n          data:{\n            shop_addr: \"${shop_addr}\",\n            shop_phone: \"${shop_phone}\",\n            shop_order: ${shop_order}\n          },\n          where:{\n            idshop: ${shopid}\n          }\n        ){\n            idshop\n            shop_name\n            shop_addr\n            shop_phone\n            shop_order\n        }\n    }`;\n  client.mutate({\n    mutation: UPDATE_SHOP_GQL\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: types.UPDATE_SHOP_DETAIL,\n      payload: data.updateShop\n    });\n    dispatch({\n      type: types.RESET_SHOP_DETAIL\n    });\n  });\n};","map":{"version":3,"sources":["C:/Program Files (x86)/Ampps/www/auckland-shop-chatbot-admin/src/actions/index.tsx"],"names":["types","ApolloClient","gql","Cookies","cookies","uri","client","request","operation","token","get","setContext","headers","authorization","userLogin","username","password","dispatch","LOGIN_GQL","mutate","mutation","then","data","login","set","path","type","LOGIN","payload","LOGIN_FAIL","catch","error","fetchShops","FETCH_SHOP_GQL","query","FETCH_SHOP","shop","fetchMenus","id","FETCH_MENU_GQL","FETCH_MENU","getMenu","deleteMenu","menuid","shopid","DELETE_MENU_GQL","DELETE_MENU","deleteShop","DELETE_SHOP_GQL","DELETE_SHOP","idshop","addNewMenu","menu_name","ADD_MENU_GQL","ADD_MENU","addMenu","menu","confirm","open","CONFIRM","snack","message","SNACK","setTimeout","addShop","shopname","shopaddr","shopphone","CREATE_SHOP_GQL","ADD_SHOP","createShop","fetchShopDetail","FETCH_SHOP_DETAIL_GQL","FETCH_SHOP_DETAIL","updateShopDetail","shop_addr","shop_phone","shop_order","UPDATE_SHOP_GQL","UPDATE_SHOP_DETAIL","updateShop","RESET_SHOP_DETAIL"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport * as types from '../constants/ActionTypes';\r\nimport { ApplicationState } from '../constants/ActionTypes';\r\nimport ApolloClient, { gql } from 'apollo-boost';\r\nimport Cookies from 'universal-cookie';\r\nimport { ActionCreator, Action, Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nexport type AppThunk = ActionCreator<\r\n  ThunkAction<void, ApplicationState, null, Action<string>>\r\n>;\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst uri = 'https://ejll3yirxk.execute-api.ap-southeast-2.amazonaws.com/dev/graphql';\r\n\r\nlet client = new ApolloClient({\r\n    uri,\r\n    request: (operation) => {\r\n      const token = cookies.get('token');\r\n      if(token){\r\n        operation.setContext({\r\n            headers: {\r\n                authorization: token ? `Bearer ${token}` : ''\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nlet token = null;\r\n\r\nexport default () => {\r\n    return \"Show page working ! \";\r\n}\r\n\r\nexport const userLogin: AppThunk = (username, password) => (dispatch: Dispatch) => {\r\n\r\n    const LOGIN_GQL = gql`\r\n    mutation {\r\n        login(\r\n            where: {\r\n                username: \"${username}\",\r\n                password: \"${password}\"\r\n            }\r\n        ){\r\n            token\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: LOGIN_GQL\r\n    }).then(({data}) => {\r\n        if(data.login){\r\n            cookies.set('token', data.login.token, { path: '/' });\r\n\r\n            dispatch({\r\n                type: types.LOGIN,\r\n                payload: data.login.token\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: types.LOGIN_FAIL,\r\n                payload: 1\r\n            });\r\n        }     \r\n    }).catch(error => {\r\n        dispatch({\r\n            type: types.LOGIN_FAIL,\r\n            payload: 1\r\n        });\r\n    });\r\n}\r\n\r\nexport const fetchShops: AppThunk = () => (dispatch: Dispatch) => {\r\n    const FETCH_SHOP_GQL = gql`\r\n    {\r\n        shop{\r\n            idshop\r\n            shop_addr\r\n            shop_name\r\n            shop_order\r\n            shop_phone\r\n        }\r\n    }`;\r\n    \r\n    client.query({\r\n        query: FETCH_SHOP_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.FETCH_SHOP,\r\n            payload: data.shop\r\n        });   \r\n    })\r\n}\r\n\r\nexport const fetchMenus: AppThunk = (id) => (dispatch: Dispatch) => {\r\n\r\n    const FETCH_MENU_GQL = gql`\r\n    mutation{\r\n        getMenu(\r\n            where:{\r\n                shop_id: ${id}\r\n            }\r\n        ){\r\n            idmenu\r\n            menu_name\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: FETCH_MENU_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.FETCH_MENU,\r\n            payload: data.getMenu\r\n        });   \r\n    })\r\n}\r\n\r\nexport const deleteMenu: AppThunk = (menuid, shopid) => (dispatch: Dispatch) => {\r\n    const DELETE_MENU_GQL = gql`\r\n    mutation{\r\n        deleteMenu(\r\n          where:{\r\n            menu_id: ${menuid},\r\n            shop_id: ${shopid}\r\n          }\r\n        ){\r\n            menu_id\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: DELETE_MENU_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.DELETE_MENU,\r\n            payload: data.deleteMenu\r\n        });   \r\n    })\r\n}\r\n\r\nexport const deleteShop: AppThunk = (shopid) => (dispatch: Dispatch) => {\r\n    const DELETE_SHOP_GQL = gql`\r\n    mutation{\r\n        deleteShop(\r\n          where: {\r\n            idshop: ${shopid}\r\n          }\r\n        ){\r\n          idshop\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: DELETE_SHOP_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.DELETE_SHOP,\r\n            payload: data.deleteShop.idshop\r\n        });   \r\n    })\r\n}\r\n\r\nexport const addNewMenu: AppThunk = (shopid, menu_name) => (dispatch: Dispatch) => {\r\n\r\n    const ADD_MENU_GQL = gql`\r\n    mutation{\r\n        addMenu(\r\n        data:{\r\n          menu_name: \"${menu_name}\",\r\n          idshop: ${shopid}\r\n        }\r\n      ){\r\n          menu{\r\n            idmenu\r\n            menu_name\r\n          }\r\n      }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: ADD_MENU_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.ADD_MENU,\r\n            payload: data.addMenu.menu\r\n        });   \r\n    });\r\n}\r\n\r\nexport const confirm: AppThunk = (open) => (dispatch: Dispatch) => {\r\n    dispatch({\r\n        type: types.CONFIRM,\r\n        payload: open\r\n    });\r\n}\r\n\r\nexport const snack: AppThunk = (open, message) => (dispatch: Dispatch) => {\r\n    dispatch({\r\n        type: types.SNACK,\r\n        payload: {\r\n            open,\r\n            message\r\n        }\r\n    });\r\n\r\n    setTimeout(\r\n        function () {\r\n            dispatch({\r\n                type: types.SNACK,\r\n                payload: {\r\n                    open: false,\r\n                    message: ''\r\n                }\r\n            });\r\n        },\r\n        3000\r\n    );\r\n}\r\n\r\nexport const addShop: AppThunk = (shopname, shopaddr, shopphone) => (dispatch: Dispatch) => {\r\n    const CREATE_SHOP_GQL = gql`\r\n    mutation{\r\n        createShop(\r\n          data :{\r\n            shop_addr: \"${shopaddr}\",\r\n            shop_name: \"${shopname}\",\r\n            shop_order: 5,\r\n            shop_phone: \"${shopphone}\"\r\n          }\r\n        ){\r\n            idshop\r\n            shop_addr\r\n            shop_name\r\n            shop_order\r\n            shop_phone\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: CREATE_SHOP_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.ADD_SHOP,\r\n            payload: data.createShop\r\n        });   \r\n    })\r\n}\r\n\r\nexport const fetchShopDetail: AppThunk = (shopid) => (dispatch: Dispatch) => {\r\n    const FETCH_SHOP_DETAIL_GQL = gql`\r\n    {\r\n        shop(\r\n            idshop: ${shopid}\r\n        ),\r\n        {\r\n            shop_addr\r\n            shop_name\r\n            shop_order\r\n            shop_phone\r\n            idshop\r\n        }\r\n    }`;\r\n    \r\n    client.query({\r\n        query: FETCH_SHOP_DETAIL_GQL\r\n    }).then(({data}) => {\r\n        dispatch({\r\n            type: types.FETCH_SHOP_DETAIL,\r\n            payload: data.shop[0]\r\n        });   \r\n    })\r\n}\r\n\r\nexport const updateShopDetail: AppThunk = (shopid, shop_addr, shop_phone, shop_order) => (dispatch: Dispatch) => {\r\n    const UPDATE_SHOP_GQL = gql`\r\n    mutation{\r\n        updateShop(\r\n          data:{\r\n            shop_addr: \"${shop_addr}\",\r\n            shop_phone: \"${shop_phone}\",\r\n            shop_order: ${shop_order}\r\n          },\r\n          where:{\r\n            idshop: ${shopid}\r\n          }\r\n        ){\r\n            idshop\r\n            shop_name\r\n            shop_addr\r\n            shop_phone\r\n            shop_order\r\n        }\r\n    }`;\r\n    \r\n    client.mutate({\r\n        mutation: UPDATE_SHOP_GQL\r\n    }).then(({data}) => {\r\n        dispatch({ type: types.UPDATE_SHOP_DETAIL, payload: data.updateShop })\r\n        dispatch({ type: types.RESET_SHOP_DETAIL })\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}